class Solution {
public:
    std::vector<int> findSubstring(std::string s, std::vector<std::string>& words) {
        std::vector<int> result;
        if (words.empty() || s.empty()) {
            return result;
        }
        int wordLength = words[0].length();
        int wordCount = words.size();
        int totalLength = wordLength * wordCount;
        if (totalLength > s.length()) {
            return result;
        }
        std::unordered_map<std::string, int> wordMap;
        for (const auto& word : words) {
            ++wordMap[word];
        }
        for (int i = 0; i <= s.length() - totalLength; ++i) {
            std::unordered_map<std::string, int> seen;
            int j = 0;
            for (; j < wordCount; ++j) {
                std::string currentWord = s.substr(i + j * wordLength, wordLength);

                if (wordMap.find(currentWord) == wordMap.end()) {
                    break;
                }

                ++seen[currentWord];

                if (seen[currentWord] > wordMap[currentWord]) {
                    break;
                }
            }


            if (j == wordCount) {
                result.push_back(i);
            }
        }

        return result;
    }
};
